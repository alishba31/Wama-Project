import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

// // Create a new form definition (Admin)
// export async function POST(request: NextRequest) {
//   try {
//     const { formName, description, schema } = await request.json();

//     // Validate input
//     if (!formName || !schema) {
//       return NextResponse.json({ message: "Form name and schema are required" }, { status: 400 });
//     }

//     // Create the form definition
//     const newForm = await prisma.formDefinition.create({
//       data: {
//         formName,
//         description,
//         schema: JSON.stringify(schema),
//       },
//     });

//     return NextResponse.json({ message: "Form created successfully", form: newForm }, { status: 201 });
//   } catch (error) {
//     console.error("Error creating form definition:", error);
//     return NextResponse.json({ message: "Internal server error" }, { status: 500 });
//   }
// }

export async function POST(request: NextRequest) {
  try {
    const { formName, description, schema } = await request.json();

    // Debugging: Log the received data
    console.log("Received data:", { formName, description, schema });

    // Validate input
    if (!formName || !schema || !Array.isArray(schema)) {
      console.error("Validation failed: Missing or invalid formName/schema");
      return NextResponse.json(
        { message: "Form name and schema are required and must be valid." },
        { status: 400 }
      );
    }

    // Auto-generate keys if not already present (fallback logic)
    const validatedSchema = schema.map((field: any) => {
      if (!field.name) {
        // Auto-generate a key if it's missing
        const autoGeneratedKey = field.label
          .toLowerCase()
          .replace(/\s+/g, "_")
          .replace(/[^\w]/g, "");
        console.log(`Auto-generated key for ${field.label}:`, autoGeneratedKey);
        return { ...field, name: autoGeneratedKey };
      }
      return field;
    });

    // Create the form definition
    const newForm = await prisma.formDefinition.create({
      data: {
        formName,
        description,
        schema: JSON.stringify(validatedSchema), // Save as JSON string
      },
    });

    return NextResponse.json(
      { message: "Form created successfully", form: newForm },
      { status: 201 }
    );
  } catch (error) {
    console.error("Error creating form definition:", error);
    return NextResponse.json(
      { message: "Internal server error" },
      { status: 500 }
    );
  }
}

// Get all form definitions (Client)
export async function GET(request: NextRequest) {
  try {
    const forms = await prisma.formDefinition.findMany();

    return NextResponse.json({ forms });
  } catch (error) {
    console.error("Error fetching form definitions:", error);
    return NextResponse.json({ message: "Internal server error" }, { status: 500 });
  }
}